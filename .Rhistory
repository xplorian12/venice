function(y) tidycensus::get_acs(
geography = "place", state = "CA", survey = "acs5", year = y,
variables = c(median = "B19013_001")
) |>
dplyr::filter(NAME == place_name) |>
dplyr::transmute(Year = y, Income = estimate)
)) |>
dplyr::arrange(Year)
p_income_ts <- ggplot2::ggplot(income_ts, ggplot2::aes(Year, Income)) +
ggplot2::geom_line() +
ggplot2::geom_point(size = 2) +
ggplot2::geom_smooth(method = "loess", se = FALSE, linetype = "dashed") +
ggplot2::scale_x_continuous(breaks = years) +
ggplot2::scale_y_continuous(labels = scales::dollar_format()) +
ggplot2::labs(title = "Median Household Income — Marina del Rey (ACS 5-year, rolling releases)", x = NULL, y = "USD")
# ---------- 4) Housing stock — SFR vs Multifamily only (normalized) ----------
units_long <- tidycensus::get_acs(
geography = "place", state = "CA", survey = "acs5", year = yr,
variables = c(
"B25024_001","B25024_002","B25024_003","B25024_004","B25024_005",
"B25024_006","B25024_007","B25024_008","B25024_009","B25024_010"
)
) |>
dplyr::filter(NAME == place_name) |>
dplyr::select(variable, estimate) |>
dplyr::mutate(variable = dplyr::recode(variable,
"B25024_001"="total", "B25024_002"="det", "B25024_003"="att",
"B25024_004"="u2", "B25024_005"="u3_4", "B25024_006"="u5_9",
"B25024_007"="u10_19", "B25024_008"="u20p", "B25024_009"="mobile",
"B25024_010"="other"
))
units_wide <- tidyr::pivot_wider(units_long, names_from = variable, values_from = estimate, values_fill = 0)
sfr_units <- units_wide$det + units_wide$att
mf_units  <- units_wide$u2 + units_wide$u3_4 + units_wide$u5_9 + units_wide$u10_19 + units_wide$u20p
den_sel   <- sfr_units + mf_units
units_sel <- dplyr::tibble(
Type  = c("SFR","Multifamily"),
Share = if (den_sel > 0) c(sfr_units/den_sel, mf_units/den_sel) else c(NA_real_, NA_real_)
)
# ---------- PRINT ----------
# Ensure the age plot actually renders into the document:
if (!is.null(p_age)) {
print(p_age)
}
# --- Optional: owner-occupied age breakdown (kept from your original) ---
owner_age <- NULL
geo_try <- try(
tidycensus::get_acs(
geography = "place",
state     = "CA",
survey    = "acs5",
year      = yr,
variables = c(pop = "B01001_001"),
cache_table = TRUE
),
silent = TRUE
)
if (!inherits(geo_try, "try-error") && !is.null(geo_try) && nrow(geo_try)) {
geolist <- geo_try |>
dplyr::mutate(NAME_clean = stringr::str_to_lower(NAME),
target_clean = stringr::str_to_lower(place_name))
georows <- geolist |> dplyr::filter(NAME_clean == target_clean)
if (nrow(georows) == 0) {
georows <- geolist |> dplyr::filter(stringr::str_detect(NAME_clean, stringr::regex("^marina\\s+del\\s+rey\\s+cdp\\b")))
}
if (nrow(georows) > 0) {
geoid_mdr   <- georows$GEOID[1]
place_label <- georows$NAME[1]
age_levels   <- c("15–24","25–34","35–44","45–54","55–64","65–74","75–84","85+")
owner_codes  <- c(2:9, 10:17)
owner_lookup <- tibble::tibble(
variable = paste0("B25007_", sprintf("%03d", owner_codes)),
Age      = factor(rep(age_levels, times = 2), levels = age_levels)
)
b25007 <- try(
tidycensus::get_acs(
geography = "place",
state     = "CA",
survey    = "acs5",
year      = yr,
variables = owner_lookup$variable,
cache_table = TRUE
),
silent = TRUE
)
if (!inherits(b25007, "try-error") && !is.null(b25007) && nrow(b25007)) {
owner_age <- b25007 |>
dplyr::filter(GEOID == geoid_mdr) |>
dplyr::select(variable, estimate) |>
dplyr::inner_join(owner_lookup, by = "variable") |>
dplyr::group_by(Age) |>
dplyr::summarise(Households = sum(estimate, na.rm = TRUE), .groups = "drop") |>
dplyr::mutate(Total = sum(Households, na.rm = TRUE),
Share = dplyr::if_else(Total > 0, Households / Total, NA_real_)) |>
dplyr::select(Age, Households, Share)
}
}
}
p_income_ts
p_tenure
if (!is.null(owner_age) && nrow(owner_age) && any(!is.na(owner_age$Share))) {
p_owner_age <- ggplot(owner_age, aes(x = Age, y = Share)) +
geom_col() +
scale_y_continuous(labels = percent_format(accuracy = 0.1), limits = c(0, 1)) +
labs(
title    = paste0("Owner-Occupied Households by Age of Householder — ", yr),
subtitle = if (exists("place_label")) place_label else place_name,
x = "Age of Householder",
y = "Share of Owner-Occupied Households"
)
p_owner_age} else {
message("Could not build the chart. Quick checks:\n",
"1) Verify your Census API key: census_api_key('YOUR_KEY', install=TRUE); library(tidycensus)\n",
"2) Confirm the place name matches ACS: 'Marina del Rey CDP, California'\n",
"3) Try a nearby year (e.g., yr <- 2022 or 2021) in case of sparse data.")
}
yr <- 2023
place_name <- "Marina del Rey CDP, California"
# ---------- 1) Tenure (Owner vs Renter) ----------
tenure_wide <- tidycensus::get_acs(
geography = "place", state = "CA", survey = "acs5", year = yr,
variables = c(total="B25003_001", owner="B25003_002", renter="B25003_003")
) |>
dplyr::filter(NAME == place_name) |>
dplyr::select(variable, estimate) |>
tidyr::pivot_wider(names_from = variable, values_from = estimate)
tenure <- tenure_wide |>
dplyr::select(total, owner, renter) |>
tidyr::pivot_longer(c(owner, renter), names_to = "Type", values_to = "Count") |>
dplyr::mutate(
Type = dplyr::recode(Type, owner = "Owner-occupied", renter = "Renter-occupied"),
Rate = Count / total
) |>
dplyr::select(Type, Rate)
p_tenure <- ggplot2::ggplot(tenure, ggplot2::aes(Type, Rate, fill = Type)) +
ggplot2::geom_col() +
ggplot2::scale_y_continuous(labels = scales::percent_format(accuracy = 0.1), limits = c(0,1)) +
ggplot2::labs(title = "Tenure — Owner vs Renter (ACS 5-year, 2023)", x = NULL, y = "Share of Occupied Units") +
ggplot2::guides(fill = "none")
# ---------- 2) Age distribution — 6 cohorts; side-by-side now vs past ----------
age_vars <- paste0("B01001_", sprintf("%03d", c(3:25, 27:49)))  # detailed male/female bins
cohortize <- function(df) {
code_num <- as.integer(sub("B01001_", "", df$variable))
df |>
dplyr::mutate(
Cohort = dplyr::case_when(
# <18
code_num %in% c(3:6, 27:30)          ~ "<18",
# 18–24  (ACS bins: 18–19, 20, 21, 22–24)
code_num %in% c(7:10, 31:34)         ~ "18–24",
# 25–34  (25–29, 30–34)
code_num %in% c(11:12, 35:36)        ~ "25–34",
# 35–44
code_num %in% c(13:14, 37:38)        ~ "35–44",
# 45–54
code_num %in% c(15:16, 39:40)        ~ "45–54",
# 55–64
code_num %in% c(17:19, 41:43)        ~ "55–64",
# 65+
code_num %in% c(20:25, 44:49)        ~ "65+",
TRUE                                  ~ NA_character_
)
) |>
dplyr::filter(!is.na(Cohort)) |>
dplyr::group_by(Cohort) |>
dplyr::summarise(People = sum(estimate, na.rm = TRUE), .groups = "drop") |>
dplyr::mutate(
Share = People / sum(People),
Cohort = factor(Cohort, levels = c("<18","18–24","25–34","35–44","45–54","55–64","65+"))
)
}
pull_age <- function(y) {
out <- try(
tidycensus::get_acs(geography="place", state="CA", survey="acs5", year=y, variables=age_vars) |>
dplyr::filter(NAME == place_name),
silent = TRUE
)
if (inherits(out, "try-error") || is.null(out) || !nrow(out)) return(NULL)
cohortize(out) |> dplyr::mutate(Year = y)
}
age_now  <- pull_age(yr)
age_past <- pull_age(yr - 10)
if (is.null(age_past)) age_past <- pull_age(yr - 5)
# If past not available, fall back to single chart
# ---------- 3) Median Household Income — MDR over time (last ~10 releases) ----------
years <- (yr-9):yr
income_ts <- dplyr::bind_rows(lapply(
years,
function(y) tidycensus::get_acs(
geography = "place", state = "CA", survey = "acs5", year = y,
variables = c(median = "B19013_001")
) |>
dplyr::filter(NAME == place_name) |>
dplyr::transmute(Year = y, Income = estimate)
)) |>
dplyr::arrange(Year)
p_income_ts <- ggplot2::ggplot(income_ts, ggplot2::aes(Year, Income)) +
ggplot2::geom_line() +
ggplot2::geom_point(size = 2) +
ggplot2::geom_smooth(method = "loess", se = FALSE, linetype = "dashed") +
ggplot2::scale_x_continuous(breaks = years) +
ggplot2::scale_y_continuous(labels = scales::dollar_format()) +
ggplot2::labs(title = "Median Household Income — Marina del Rey (ACS 5-year, rolling releases)", x = NULL, y = "USD")
# ---------- 4) Housing stock — SFR vs Multifamily only (normalized) ----------
units_long <- tidycensus::get_acs(
geography = "place", state = "CA", survey = "acs5", year = yr,
variables = c(
"B25024_001","B25024_002","B25024_003","B25024_004","B25024_005",
"B25024_006","B25024_007","B25024_008","B25024_009","B25024_010"
)
) |>
dplyr::filter(NAME == place_name) |>
dplyr::select(variable, estimate) |>
dplyr::mutate(variable = dplyr::recode(variable,
"B25024_001"="total", "B25024_002"="det", "B25024_003"="att",
"B25024_004"="u2", "B25024_005"="u3_4", "B25024_006"="u5_9",
"B25024_007"="u10_19", "B25024_008"="u20p", "B25024_009"="mobile",
"B25024_010"="other"
))
units_wide <- tidyr::pivot_wider(units_long, names_from = variable, values_from = estimate, values_fill = 0)
sfr_units <- units_wide$det + units_wide$att
mf_units  <- units_wide$u2 + units_wide$u3_4 + units_wide$u5_9 + units_wide$u10_19 + units_wide$u20p
den_sel   <- sfr_units + mf_units
units_sel <- dplyr::tibble(
Type = c("SFR","Multifamily"),
Share = if (den_sel > 0) c(sfr_units/den_sel, mf_units/den_sel) else c(NA_real_, NA_real_)
)
# ---------- Print ----------
yr <- 2023
place_name <- "Marina del Rey CDP, California"   # must match ACS naming
# --- 1) Resolve GEOID from ACS itself (using total population) ---
owner_age <- NULL
geo_try <- try(
tidycensus::get_acs(
geography = "place",
state     = "CA",
survey    = "acs5",
year      = yr,
variables = c(pop = "B01001_001"),       # total population
cache_table = TRUE
),
silent = TRUE
)
if (!inherits(geo_try, "try-error") && !is.null(geo_try) && nrow(geo_try)) {
# Find exact, then fuzzy if needed
geolist <- geo_try %>%
mutate(NAME_clean = str_to_lower(NAME),
target_clean = str_to_lower(place_name))
georows <- geolist %>% filter(NAME_clean == target_clean)
if (nrow(georows) == 0) {
georows <- geolist %>% filter(str_detect(NAME_clean, regex("^marina\\s+del\\s+rey\\s+cdp\\b")))
}
if (nrow(georows) > 0) {
geoid_mdr   <- georows$GEOID[1]
place_label <- georows$NAME[1]
# --- 2) Pull B25007 owner bins (male 002–009 + female 010–017) and sum by age ---
age_levels   <- c("15–24","25–34","35–44","45–54","55–64","65–74","75–84","85+")
owner_codes  <- c(2:9, 10:17)
owner_lookup <- tibble::tibble(
variable = paste0("B25007_", sprintf("%03d", owner_codes)),
Age      = factor(rep(age_levels, times = 2), levels = age_levels)
)
b25007 <- try(
tidycensus::get_acs(
geography = "place",
state     = "CA",
survey    = "acs5",
year      = yr,
variables = owner_lookup$variable,
cache_table = TRUE
),
silent = TRUE
)
if (!inherits(b25007, "try-error") && !is.null(b25007) && nrow(b25007)) {
owner_age <- b25007 %>%
filter(GEOID == geoid_mdr) %>%
select(variable, estimate) %>%
inner_join(owner_lookup, by = "variable") %>%
group_by(Age) %>%
summarise(Households = sum(estimate, na.rm = TRUE), .groups = "drop") %>%
mutate(Total = sum(Households, na.rm = TRUE),
Share = if_else(Total > 0, Households / Total, NA_real_)) %>%
select(Age, Households, Share)
}
}
}
perm_dir <- "C:/Users/stange/Desktop/DTR/code/mdr/mdr/medians/permits"
# list all csvs
files <- list.files(perm_dir, pattern = "\\.csv$", full.names = TRUE)
parse_one <- function(path) {
base <- tolower(basename(path))
# asset from filename
asset <- if (grepl("apartment", base)) "Apartment" else
if (grepl("commercial", base)) "Commercial" else
if (grepl("residential", base)) "Residential" else NA_character_
# status from filename
status <- if (grepl("final", base)) "Finaled" else
if (grepl("issued", base)) "Issued" else NA_character_
# count rows = permits
n_rows <- tryCatch(nrow(suppressWarnings(readr::read_csv(path, show_col_types = FALSE))),
error = function(e) NA_integer_)
data.frame(Asset = asset, Status = status, Permits = n_rows, stringsAsFactors = FALSE)
}
df <- do.call(rbind, lapply(files, parse_one))
df <- df[!is.na(df$Asset) & !is.na(df$Status) & !is.na(df$Permits), , drop = FALSE]
# aggregate & fill missing combos with zeros
bar_df <- df |>
dplyr::group_by(Asset, Status) |>
dplyr::summarise(Permits = sum(Permits, na.rm = TRUE), .groups = "drop") |>
tidyr::complete(
Asset  = c("Apartment","Commercial","Residential"),
Status = c("Issued","Finaled"),
fill = list(Permits = 0)
) |>
dplyr::mutate(
Asset  = factor(Asset,  levels = c("Apartment","Commercial","Residential")),
Status = factor(Status, levels = c("Issued","Finaled"))
)
p <- ggplot2::ggplot(bar_df, ggplot2::aes(x = Asset, y = Permits, fill = Status)) +
ggplot2::geom_col(position = ggplot2::position_dodge(width = 0.7), width = 0.6) +
ggplot2::geom_text(ggplot2::aes(label = Permits),
position = ggplot2::position_dodge(width = 0.7),
vjust = -0.3, size = 3) +
ggplot2::scale_y_continuous(expand = ggplot2::expansion(mult = c(0, 0.08))) +
ggplot2::labs(
title = "Permits by Asset Type and Status",
x = NULL, y = "Number of Permits", fill = NULL
)
p
# Build two bar charts from the raw CSV files (no date dependency):
# 1) Issued only: x = Asset (Apartment/Commercial/Residential), color = Action (New/Demolition)
# 2) Finaled only: same as above
perm_dir <- "C:/Users/stange/Desktop/DTR/code/mdr/mdr/medians/permits"
files <- list.files(perm_dir, pattern = "\\.csv$", full.names = TRUE)
parse_one <- function(path) {
base <- tolower(basename(path))
asset <- if (grepl("apartment",  base)) "Apartment"  else
if (grepl("commercial", base)) "Commercial" else
if (grepl("residential",base)) "Residential" else NA_character_
action <- if (grepl("demo", base)) "Demolition" else
if (grepl("new",  base)) "New"        else NA_character_
status <- if (grepl("final",  base)) "Finaled" else
if (grepl("issued", base)) "Issued"  else NA_character_
n_rows <- tryCatch(nrow(suppressWarnings(readr::read_csv(path, show_col_types = FALSE))),
error = function(e) NA_integer_)
data.frame(Asset = asset, Action = action, Status = status, Permits = n_rows, stringsAsFactors = FALSE)
}
df <- do.call(rbind, lapply(files, parse_one))
df <- df[!is.na(df$Asset) & !is.na(df$Action) & !is.na(df$Status) & !is.na(df$Permits), , drop = FALSE]
# Aggregate counts and fill missing combos with zeros
base_levels_asset  <- c("Apartment","Commercial","Residential")
base_levels_action <- c("New","Demolition")
agg <- df |>
dplyr::group_by(Asset, Action, Status) |>
dplyr::summarise(Permits = sum(Permits, na.rm = TRUE), .groups = "drop")
# ----- Chart 1: Issued only -----
issued_df <- agg |>
dplyr::filter(Status == "Issued") |>
tidyr::complete(
Asset  = base_levels_asset,
Action = base_levels_action,
fill = list(Permits = 0)
) |>
dplyr::mutate(
Asset  = factor(Asset,  levels = base_levels_asset),
Action = factor(Action, levels = base_levels_action)
)
p_issued <- ggplot2::ggplot(issued_df, ggplot2::aes(x = Asset, y = Permits, fill = Action)) +
ggplot2::geom_col(position = ggplot2::position_dodge(width = 0.7), width = 0.6) +
ggplot2::geom_text(ggplot2::aes(label = Permits),
position = ggplot2::position_dodge(width = 0.7),
vjust = -0.3, size = 3) +
ggplot2::scale_y_continuous(expand = ggplot2::expansion(mult = c(0, 0.08))) +
ggplot2::labs(
title = "Permits (Issued) — by Asset and Action",
x = NULL, y = "Number of Permits", fill = NULL
)
p_issued# ----- Chart 2: Finaled only -----
finaled_df <- agg |>
dplyr::filter(Status == "Finaled") |>
tidyr::complete(
Asset  = base_levels_asset,
Action = base_levels_action,
fill = list(Permits = 0)
) |>
dplyr::mutate(
Asset  = factor(Asset,  levels = base_levels_asset),
Action = factor(Action, levels = base_levels_action)
)
p_finaled <- ggplot2::ggplot(finaled_df, ggplot2::aes(x = Asset, y = Permits, fill = Action)) +
ggplot2::geom_col(position = ggplot2::position_dodge(width = 0.7), width = 0.6) +
ggplot2::geom_text(ggplot2::aes(label = Permits),
position = ggplot2::position_dodge(width = 0.7),
vjust = -0.3, size = 3) +
ggplot2::scale_y_continuous(expand = ggplot2::expansion(mult = c(0, 0.08))) +
ggplot2::labs(
title = "Permits (Finaled) — by Asset and Action",
x = NULL, y = "Number of Permits", fill = NULL
)
p_finaled
sales_data <- read.csv(
"C:/Users/stange/Desktop/DTR/code/mdr/mdr/individual/june23-25.csv",
stringsAsFactors = FALSE
)
top_buildings <- sales_data %>%
mutate(
# Normalize: lowercase, trim, collapse spaces
Address_clean = str_squish(str_to_lower(Address)),
# Remove "#" and everything after it
BaseAddress = str_trim(str_remove(Address_clean, "\\s+#.*$"))
) %>%
group_by(BaseAddress) %>%
summarise(SalesCount = n(), .groups = "drop") %>%
arrange(desc(SalesCount)) %>%
slice_head(n = 25)
show_table("Top Buildings", top_buildings)
leases <- read_csv(
"C:/Users/stange/Desktop/DTR/code/mdr/mdr/individual/lease-24-25.csv",
show_col_types = FALSE
)
# Helper: normalize address and strip unit/suite identifiers at the end
norm_addr <- function(x) {
x %>%
str_to_lower() %>%                         # case-insensitive
str_replace_all(",", " ") %>%              # remove commas
str_squish() %>%                           # collapse extra spaces
# remove things like "#123", "apt 3b", "unit a", "suite 4", "ste c", "space 12", "no 5" at the END
str_replace("\\s+(?:#|unit|apt|apartment|suite|ste|space|spc|no\\.?|number)\\s*[-\\w]+\\s*$", "") %>%
str_squish()
}
leases_clean <- leases %>%
mutate(
Address_clean = norm_addr(Address),
City_clean    = str_squish(str_to_lower(City))
)
top_buildings_lease <- leases_clean %>%
group_by(City_clean, Address_clean) %>%
summarise(LeaseCount = n(), .groups = "drop") %>%
arrange(desc(LeaseCount)) %>%
slice_head(n = 35)
show_table("Top Buildings Lease", top_buildings_lease)
pick_file <- function(candidates) {
f <- candidates[file.exists(candidates)]
if (length(f) == 0) stop("None of these files found: ", paste(candidates, collapse = ", "))
f[1]
}
read_top10 <- function(path) {
read_csv(
pick_file(path),
show_col_types = FALSE,
col_types = cols(name = col_character(), count = col_integer())
) |>
filter(!is.na(name), name != "") |>
group_by(name) |>
summarise(count = sum(count, na.rm = TRUE), .groups = "drop") |>
slice_max(order_by = count, n = 15, with_ties = FALSE)
}
seller_agent_top10     <- read_top10(c("seller_agent_counts.csv",     "Seller_agent_counts__preview_.csv"))
buyer_agent_top10      <- read_top10(c("buyer_agent_counts.csv",      "Buyer_agent_counts__preview_.csv"))
seller_brokerage_top10 <- read_top10(c("seller_brokerage_counts.csv", "Seller_brokerage_counts__preview_.csv"))
buyer_brokerage_top10  <- read_top10(c("buyer_brokerage_counts.csv",  "Buyer_brokerage_counts__preview_.csv"))
cat("### Top 10 Seller Agents\n")
nice_table(seller_agent_top10)
show_table("Top 10 Seller Brokerages", seller_brokerage_top10)
show_table("Top 10 Buyer Agents", buyer_agent_top10)
show_table("Top 10 Buyer Brokerages", buyer_brokerage_top10)
top_buildings_lease <- leases_clean %>%
group_by(City_clean, Address_clean) %>%
summarise(LeaseCount = n(), .groups = "drop") %>%
arrange(desc(LeaseCount)) %>%
slice_head(n = 55)
sales_data <- read.csv(
"C:/Users/stange/Desktop/DTR/code/mdr/mdr/individual/june23-25.csv",
stringsAsFactors = FALSE
)
top_buildings <- sales_data %>%
mutate(
# Normalize: lowercase, trim, collapse spaces
Address_clean = str_squish(str_to_lower(Address)),
# Remove "#" and everything after it
BaseAddress = str_trim(str_remove(Address_clean, "\\s+#.*$"))
) %>%
group_by(BaseAddress) %>%
summarise(SalesCount = n(), .groups = "drop") %>%
arrange(desc(SalesCount)) %>%
slice_head(n = 25)
show_table("Top Buildings", top_buildings)
leases <- read_csv(
"C:/Users/stange/Desktop/DTR/code/mdr/mdr/individual/lease-24-25.csv",
show_col_types = FALSE
)
# Helper: normalize address and strip unit/suite identifiers at the end
norm_addr <- function(x) {
x %>%
str_to_lower() %>%                         # case-insensitive
str_replace_all(",", " ") %>%              # remove commas
str_squish() %>%                           # collapse extra spaces
# remove things like "#123", "apt 3b", "unit a", "suite 4", "ste c", "space 12", "no 5" at the END
str_replace("\\s+(?:#|unit|apt|apartment|suite|ste|space|spc|no\\.?|number)\\s*[-\\w]+\\s*$", "") %>%
str_squish()
}
leases_clean <- leases %>%
mutate(
Address_clean = norm_addr(Address),
City_clean    = str_squish(str_to_lower(City))
)
top_buildings_lease <- leases_clean %>%
group_by(City_clean, Address_clean) %>%
summarise(LeaseCount = n(), .groups = "drop") %>%
arrange(desc(LeaseCount)) %>%
slice_head(n = 55)
show_table("Top Buildings Lease", top_buildings_lease)
